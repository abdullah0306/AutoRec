generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String        @id @default(uuid())
  username                  String        @unique
  email                     String        @unique
  hashed_password           String
  first_name                String?
  last_name                 String?
  age                       Int?
  is_active                 Boolean       @default(true)
  created_at                DateTime      @default(now())
  updated_at                DateTime      @updatedAt
  email_verified            Boolean       @default(false)
  email_verification_token  String?       @unique
  email_verification_expiry DateTime?
  subscription              Subscription?
  selectedCandidates        SelectedCandidate[]

  @@map("users")
}

model Package {
  id                   String         @id @default(uuid())
  name                 String         @unique
  description          String
  price                Float
  maxMonthlyScrapes    Int
  maxUrlsPerBatch      Int
  maxPagesPerSite      Int
  concurrentSites      Int
  maxMonthlyEmails     Int            @default(1000)
  maxEmailsPerSite     Int            @default(50)
  isActive             Boolean        @default(true)
  createdAt            DateTime       @default(now())
  stripeProductId      String?
  stripePriceId        String?
  maxCandidateProfiles Int
  maxProfilesPerBatch  Int
  subscriptions        Subscription[]

  @@map("packages")
}

model Subscription {
  id                    String    @id @default(uuid())
  userId                String    @unique
  packageId             String
  startDate             DateTime  @default(now())
  endDate               DateTime?
  isActive              Boolean   @default(true)
  monthlyUsage          Int       @default(0)
  monthlyEmailUsage     Int       @default(0)
  monthlyCandidateUsage Int       @default(0)
  lastUsageReset        DateTime  @default(now())
  package               Package   @relation(fields: [packageId], references: [id])
  user                  User      @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model SelectedCandidate {
  id                String   @id @default(uuid())
  userId            String
  linkedinProfileUrl String
  name              String
  title             String?
  location          String?
  experience        Json?
  education         Json?
  skills            String[]
  summary           String?
  matchPercentage   Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("selected_candidates")
}
